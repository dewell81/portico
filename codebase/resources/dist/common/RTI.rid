# ================================
# Portico RTI Initialization Data
# ================================
# This file contains all available configuration options for Portico. 
# Values are initially commented out and are provided shown with their default settings.
#
# All options are formatted as name=value pairs, the '#' and '!' characters mark comment lines
#
# To make use of this file, put it in the directory that your federate is executed from, or set the
# RTI_RID_FILE environment variable to point at wherever it is located.
#
# -------------------------
# Network Symbolic Names
# -------------------------
# For any place where an IP address or name could validly be entered, you can instead use a more
# generic, symbolic string. When a symbolic name is used, Portico will substitute it for the first
# address or NIC it can find that matches. The following symbolic names are available:
#
#  - LOOPBACK:   127.0.0.1
#  - LINK_LOCAL: 169.254.1.0 - 169.254.254.255 inclusive
#  - SITE_LOCAL: 10.0.0.0/8 (255.0.0.0), 172.16.0.0/12 (255.240.0.0), 192.168.0.0/16 (255.255.0.0)
#  - GLOBAL:     Any address not in the above


# ====================================================
#               Common Configuration
# ====================================================

# (C.1) Common Logging Properties
#        Specify the log level and directory. Settings are common across RTI, LRC and Forwarder.
#        You can also specify the log4j pattern that is used to format the log messages.
#
portico.logdir = logs
portico.loglevel = INFO
portico.logformat = %d{ABSOLUTE} %-5p %c: %m%n

# Log-level for any JGroups connections
portico.jgroups.loglevel = OFF


# ==================================================================================
# ///  RTI Configuration  //////////////////////////////////////////////////////////
# ==================================================================================

# (R.1) RTI Home Location
#        The location of the RTI installation. Can be overridden by the env-var RTI_HOME.
#
rti.home = ./


# (R.2) RTI Data Directory
#        The location to write log files, federation save files and all other data to.
#        While core RTI files are often installed into Program Files or other privileged
#        areas on Linux, the data directory typically points to subfolder of a users home
#        directory or some other place that is writable without administrative privileges.
#
#rti.data = ${user.home}/.portico     // Linux
#rti.data = ${user.home}\Portico      // Windows


# --------------------------------------
#   Network Configuration
# --------------------------------------
# (R.3) RTI Network Connections
#        Specify the names of all the connections we are using. These names have no relation to
#        the type of connection, even if it appears otherwise. On start-up, the RTI will substitute
#        the names to find more details properties.
#
#        The RTI will look for a set of properties under the name "rti.network.<name>.{property}"
#        where "<name>" is substituted for each name in the connection list. The ".type" property
#        is what defines the actual connection type. It can be one of the pre-defined types of
#        "jvm", "multicast" or "unicast", or it can specified the fully qualified name of the class
#        that implements the connection.
#
rti.network.connections = multicast, tcp, jvm


# (R.4) JVM Network Connection Configuration
#        This connection type has not properties.
#
rti.network.jvm.type = jvm


# (R.5) Multicast Connection Configuration
#
#    Address: A valid multicast or broadcast group, or the symbolic name BROADCAST
#       Port: Any valid port number
#        NIC: The address or host name of the NIC we should use to send/receive traffic, or
#             one of the symbolic names from above (LOOPBACK, LINK_LOCAL, SITE_LOCAL, GLOBAL).
#
rti.network.multicast.type    = multicast
rti.network.multicast.address = 239.1.2.3
rti.network.multicast.port    = 20913
rti.network.multicast.nic     = SITE_LOCAL


# (R.6) Unicast Network Connection
#
#       Port: The port number to listen on.
#        NIC: A valid host name or IP address used by the NIC we should use to receive connections,
#             or one of the symbolic names from above (LOOPBACK, LINK_LOCAL, SITE_LOCAL, GLOBAL).
#
rti.network.tcp.type = tcp-server
rti.network.tcp.port = 52295
rti.network.tcp.nic  = SITE_LOCAL


# ==================================================================================
# ///  LRC Configuration  //////////////////////////////////////////////////////////
# ==================================================================================

# --------------------------------------
#   Network Configuration
# --------------------------------------
# (L.1) LRC Network Connections
#        The same structure as for the RTI, except that only one name can be specified.
#
lrc.network.connection = multicast
#lrc.network.connection = tcp


# (L.2) JVM Connection Properties
#        Only used if the JVM connection is specified.
#        No configuration for the JVM connection beyond saying it is of type JVM
#
lrc.network.jvm.type = jvm

# (L.3) Multicast Connection Properties
#
#        Only used if multicast is specified as the connection.
#        Be sure to check the *NIC* you are binding with. You can use some of the
#        symbolic short-cuts highlighted at the top of this config file.
#
#    Address: A valid multicast or broadcast group, or the symbolic name BROADCAST
#       Port: Any valid port number
#        NIC: The address or host name of the NIC we should use to send/receive traffic, or
#             one of the symbolic names from above (LOOPBACK, LINK_LOCAL, SITE_LOCAL, GLOBAL).
#
lrc.network.multicast.type    = multicast
lrc.network.multicast.address = 239.1.2.3
lrc.network.multicast.port    = 20913
lrc.network.multicast.nic     = SITE_LOCAL

# (L.4) TCP Connection Properties
#
#        Only used if tcp is specified as the LRC connection.
#        Be sure to fill out the address of the server and check your firewall for
#        any connection blocking.
#
#    Address: The IP address or host name of the server
#       Port: The port that the server is listening on
#        NIC: The local NIC to use. Address or host name of the local NIC, or can use
#             one of the symbolic names (LOOPBACK, LINK_LOCAL, SITE_LOCAL, GLOBAL).
#
lrc.network.tcp.type     = tcp-client
lrc.network.tcp.address  = 192.168.0.10
lrc.network.tcp.port     = 52295
lrc.network.tcp.nic      = SITE_LOCAL

# (L.5) TCP Connection Bundling Support
#         If you are sending lots of smaller messages, higher overall throughput can be obtained by
#         bundling them together into a fewer number of larger messages. However, doing so comes at
#         the cost of latency. Messages are buffered until either the timeout period (milliseconds)
#         is reached, or the total size of the messages exceeds the specified threshold. Bundling
#         is DISABLED by default. For latency-critical tasks, disable it or reduce the max-timeout.
#
lrc.network.tcp.bundling = false
lrc.network.tcp.bundling.maxSize = 64K
lrc.network.tcp.bundling.maxTime = 20


# ==================================================================================
# ///  Forwarder Configuration  ////////////////////////////////////////////////////
# ==================================================================================

# --------------------------------------
#   Network Configuration
# --------------------------------------
# (F.1) Forwarder Upstream Connection
fwd.network.upstream.type    = tcp-client
fwd.network.upstream.address = 192.168.0.10
fwd.network.upstream.port    = 52295
fwd.network.upstream.nic     = SITE_LOCAL

# (F.2) Forwarder Downstream/Local Connection
fwd.network.downstream.type    = multicast
fwd.network.downstream.address = 239.1.2.3
fwd.network.downstream.port    = 20913
fwd.network.downstream.nic     = SITE_LOCAL



# //////////////////////////////////////////////////////////////////////////// #
#                       Legacy Configuration Options                           #
# //////////////////////////////////////////////////////////////////////////// #

# =========================================
# 4. JGroups Network Settings
# =========================================
# Portico uses the JGroups library for its inter-federate network communication.
# These settings control various parameters of the network layer and JGroups itself.

# (4.1) JGroups UDP Address and Port
#        Address and port to use for communication between federates.
#        DEFAULT: 239.20.9.13:20913
#
# portico.jgroups.udp.address = 239.20.9.13
# portico.jgroups.udp.port = 20913


# (4.2) JGroups Bind Address
#        The address/NIC Portico should use. Can use an IP address associated with a NIC, or
#        one of the following special values:
#
#            GLOBAL: Pick a global IP address if available. If not, falls back to a SITE_LOCAL IP address.
#        SITE_LOCAL: Picks a site local (non routable) IP address, e.g. from the 192.168.0.0 or 10.0.0.0 address range.
#        LINK_LOCAL: Picks a link-local IP address, from 169.254.1.0 through 169.254.254.255.
#      NON_LOOPBACK: Picks any non loopback address.
#          LOOPBACK: Pick a loopback address, e.g. 127.0.0.1.
#   match-interface: Pick an address which matches a pattern against the interface name, e.g. match-interface:eth.*
#     match-address: Pick an address which matches a pattern against the host address, e.g. match-address:192.168.*
#        match-host: Pick an address which matches a pattern against the host name, e.g. match-host:linux.*
#
#        DEFAULT: SITE_LOCAL
#
# portico.jgroups.udp.bindAddress = SITE_LOCAL


# (4.3) JGroups UDP Sent/Receive Buffer Size
#        Incoming/Outgoing buffer sizes. Default receive buffer is quite large to allow ample
#        space on fast networks and avoid dropped packets.
#
# portico.jgroups.udp.receiveBuffer = 25M
# portico.jgroups.udp.sendBuffer = 640K


# (4.4) JGroups Bundling Support
#         If you are sending lots of smaller messages, higher overall throughput can be obtained by
#         bundling them together into a fewer number of larger messages. However, doing so comes at
#         the cost of latency. Messages are buffered until either the timeout period (milliseconds)
#         is reached, or the total size of the messages exceeds the specified threshold. Bundling
#         is enabled by default. For latency-critical tasks, disable it or reduce the max-timeout.
#
# portico.jgroups.bundling = true
# portico.jgroups.bundling.maxSize = 64K
# portico.jgroups.bundling.maxTime = 30


# (4.5) JGroups Flow Control
#         Flow control is used to rate limit transmission so that slow receivers don't get overrun,
#         causing them to drop messages and requiring expensive retransmission.
#
#         This value sets the maximum number of bytes that can be sent by a federate before it
#         needs to receive more credits from other cluster members. These credits are not sent
#         until the other federates have processed enough of the prior sent messages. The ratio
#         setting defines how far through its current credits a sender can get before it should
#         issue a request for more.
#
#         Setting the credit limit higher will allow a federate to send more messages before it
#         gets blocked. Consider adjusting this value in conjunction with the buffer sizes, as
#         they will dictate storage capacity on the sender side.
#
#         Note: If you start experiencing unstable behaviour, turn this value down. Flow control
#               can be sensitive to the number of messages you try to send out in a hurry. If
#               bundling is enabled, you can use a higher value because although you are sending
#               more messages, the actual number hitting the network is smaller.
#
# portico.jgroups.flow.credits = 2M
# portico.jgroups.flow.threshold = 0.4


# (4.6) Packet Fragmentation Size
#         Messages larger than this size will be broken down into smaller ones for transmission,
#         reducing potentially lengthy delays retransmitting whole large messages when a single
#         datagram is lost.
#         Note: The max bundling size must be greater than this value.
#
# portico.jgroups.frag.size = 60K


# (4.7) JGroups Traffic Auditing
#         If this option is enabled a special log file will be produced for each federate listing
#         the messages it has sent and received, along with their size and other useful details.
#         This information can be used to make judgements about network config (such as bundling
#         limits) or to just see what is happening in the federation at a network level.
#
#         The audit files are placed in the logs directory (see sec 1.1) with the name:
#         "audit-FEDERATENAME.log"
#
#         If the auditor is enabled you can specify a detail level to control what is logged.
#         When set to "full", each message will be logged with its specific details. (default)
#         When set to "summary", only the summary tables will be printed
#
# portico.jgroups.auditor.enabled = false
# portico.jgroups.auditor.details = full

# (4.8) JGroups Traffic Audit Filtering
#         Federates can generate a lot of messages. Sometimes you really just want to zero in
#         on a particular type of message, or messages for a particular FOM type. These filters
#         let you do that. These filters work in combination. For example, consider the following:
#             - action  = sent
#             - type    = UpdateAttributes
#             - fomtype = Lifeform, GroundVehicle
#
#         Given this, only attribute updates for the FOM classes "Lifeform" and "GroundVehicle"
#         that the local federate sends will be logged. Leaving a value empty, or using the
#         keyword "all" will cause no filtering for that type to be applied.
#
#         NOTE: If the detail level is set to "summary", -no- individual messages will be logged,
#               regardless of the filter settings.
#         
# portico.jgroups.auditor.filter.direction = 
# portico.jgroups.auditor.filter.message   = 
# portico.jgroups.auditor.filter.fomtype   = 

# =========================================
# 5. WAN Connection Options
# =========================================

# (5.1) WAN Mode Enable/Disable
#       If true, WAN mode will be enabled and this federate will act as both a
#       local participant, and also as a bridge for all the local federates.
#       Messages exchanged on the local JGroups channel will be forwarded to a
#       central router (see 5.2) to be reflected out to other sites. Messagest
#       received from the router will be pushed out to the local JGroups channel
#       so everyone here can process them.
#
#       Note that this mode does not support bundling. If enabled in the RID, it
#       will be active on the local JGroups network, but ignored for the WAN.
#
#       Note: Router must be running before federate startup. If not - federates
#             will fail to start.
#
#       Default: false
#       
# portico.wan.enabled = false

# (5.2) Router Address/Port
#       Specifies the address and port of the WAN router to use. Note that the
#       syntax is "address:port".
#
#       Default: 127.0.0.1:23114
#
# portico.wan.router = 127.0.0.1:23114

# (5.2) Enable / Disable Bundling
#       Bundling enables higher throughput by grouping together a number of
#       smaller messages and sending them as one. This makes much more efficient
#       use of the network and provides considerable improvements to throughput
#       at a minor cost to latency.
#
#       If enabled, the subsequent options will control how it is applied.
#
#       Default: true
#
# portico.wan.bundle.enabled = true

# (5.3) Max Bundle Size
#       Messages sent over the WAN will be grouped into bundles and sents as
#       a batch when their total size exceeds this value. Specify a size with
#       a suffix of 'b', 'k' or 'm' (or 'g' if you dare!)
#
#       Default: 64k
#
# portico.wan.bundle.maxsize = 64K

# (5.4) Max Bundle Timeout
#       The maximum amount of time we will hold messages in the bundler for while
#       waiting for more messages to arrive and bundle together. From the time that
#       a message is received, the bundler will hold it for no longer than this
#       value (specified in milliseconds).
#
#       Default: 20
#
# portico.wan.bundle.timeout = 20


# =========================================
# A51. Undocumented Settings
# =========================================
# This section is a catch-all of settings we use for internal work, and infrequently.
# Their specific usecase and function is undocumented as they are not intended for general use.
# portico.container.loglevel = OFF
# portico.jgroups.loglevel = OFF
# portico.jgroups.timeout = 1000

